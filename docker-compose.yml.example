# =============================================================================
# Docker Compose Configuration Template for Real Estate CRM
# =============================================================================
# IMPORTANT: This is a template file. Copy to docker-compose.yml and customize.
# WARNING: Never commit production secrets to version control!
# File Permissions: Set to 644 for docker-compose.yml
# =============================================================================

version: '3.8'

# Networks for service isolation and communication
networks:
  crm-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# Persistent volumes for data storage
volumes:
  mysql-data:
    driver: local
  redis-data:
    driver: local
  uploads-data:
    driver: local
  logs-data:
    driver: local
  backups-data:
    driver: local

services:
  # =============================================================================
  # Web Application Service
  # =============================================================================
  web:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        NODE_ENV: production
    container_name: crm-web
    restart: unless-stopped
    
    # Port mapping - adjust external port as needed
    ports:
      - "3000:3000"
    
    # Environment variables - use .env file for secrets
    environment:
      - NODE_ENV=production
      - PORT=3000
      # WARNING: Use .env file for sensitive data!
      - DB_HOST=mysql
      - REDIS_HOST=redis
      
    # Volume mounts for persistent data
    volumes:
      - uploads-data:/app/uploads:rw
      - logs-data:/app/logs:rw
      - ./config:/app/config:ro
      
    # Service dependencies
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
        
    # Health check configuration
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
      
    # Security and resource limits
    security_opt:
      - no-new-privileges:true
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.25'
          
    networks:
      - crm-network

  # =============================================================================
  # MySQL Database Service
  # =============================================================================
  mysql:
    image: mysql:8.0
    container_name: crm-mysql
    restart: unless-stopped
    
    # Environment configuration
    environment:
      # WARNING: Use strong passwords and .env file for production!
      MYSQL_ROOT_PASSWORD: secure-root-password-change-this
      MYSQL_DATABASE: real_estate_crm
      MYSQL_USER: crm_user
      MYSQL_PASSWORD: secure-user-password-change-this
      
    # Port mapping - consider restricting to localhost only
    ports:
      - "3306:3306"
      
    # Persistent data storage
    volumes:
      - mysql-data:/var/lib/mysql
      - ./database/init:/docker-entrypoint-initdb.d:ro
      - ./database/backups:/backups:rw
      
    # MySQL configuration
    command: >
      --default-authentication-plugin=mysql_native_password
      --innodb-buffer-pool-size=256M
      --max-connections=100
      --query-cache-size=0
      --tmp-table-size=32M
      --max-heap-table-size=32M
      
    # Health check
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-p$$MYSQL_ROOT_PASSWORD"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
      
    # Security and resource limits
    security_opt:
      - no-new-privileges:true
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.3'
          
    networks:
      - crm-network

  # =============================================================================
  # Redis Cache Service
  # =============================================================================
  redis:
    image: redis:7-alpine
    container_name: crm-redis
    restart: unless-stopped
    
    # Port mapping
    ports:
      - "6379:6379"
      
    # Redis configuration
    command: >
      redis-server
      --appendonly yes
      --maxmemory 256mb
      --maxmemory-policy allkeys-lru
      --requirepass secure-redis-password-change-this
      
    # Persistent data storage
    volumes:
      - redis-data:/data
      
    # Health check
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "secure-redis-password-change-this", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      
    # Security and resource limits
    security_opt:
      - no-new-privileges:true
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.2'
          
    networks:
      - crm-network

  # =============================================================================
  # Nginx Reverse Proxy (Optional)
  # =============================================================================
  nginx:
    image: nginx:alpine
    container_name: crm-nginx
    restart: unless-stopped
    
    # Port mapping for HTTP/HTTPS
    ports:
      - "80:80"
      - "443:443"
      
    # Configuration and SSL certificates
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./nginx/logs:/var/log/nginx:rw
      
    # Service dependencies
    depends_on:
      - web
      
    # Health check
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      
    networks:
      - crm-network

  # =============================================================================
  # Backup Service (Optional)
  # =============================================================================
  backup:
    image: alpine:latest
    container_name: crm-backup
    restart: "no"
    
    # Backup volumes
    volumes:
      - mysql-data:/backup/mysql:ro
      - uploads-data:/backup/uploads:ro
      - backups-data:/backup/storage:rw
      - ./scripts/backup.sh:/backup/backup.sh:ro
      
    # Backup command
    command: /bin/sh -c "chmod +x /backup/backup.sh && /backup/backup.sh"
    
    # Service dependencies
    depends_on:
      - mysql
      
    networks:
      - crm-network

# =============================================================================
# DEPLOYMENT NOTES:
# =============================================================================
# 1. Copy this file to docker-compose.yml and customize values
# 2. Create a .env file with production secrets (never commit this!)
# 3. Ensure proper file permissions: chmod 644 docker-compose.yml
# 4. Create required directories: mkdir -p uploads logs backups database/init nginx/ssl
# 5. Set directory permissions: chmod 755 uploads logs backups
# 6. Build and start: docker-compose up -d
# 7. Monitor logs: docker-compose logs -f
# 8. Health checks: docker-compose ps
# 9. Stop services: docker-compose down
# 10. Production considerations:
#     - Use secrets management for sensitive data
#     - Configure log rotation and monitoring
#     - Set up SSL certificates for HTTPS
#     - Configure firewalls and network security
#     - Regular backups and disaster recovery
#     - Monitor resource usage and scaling
# =============================================================================